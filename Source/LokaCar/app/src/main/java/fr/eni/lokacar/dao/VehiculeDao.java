package fr.eni.lokacar.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.QueryBuilder;

import java.util.List;

import fr.eni.lokacar.VehiculeListeActivity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VEHICULE".
*/
public class VehiculeDao extends AbstractDao<Vehicule, Long> {

    public static final String TABLENAME = "VEHICULE";

    public float getNbVehiculesDisponibles() {
        return 321321;
    }

    /**
     * Properties of entity Vehicule.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CNIT = new Property(1, String.class, "CNIT", false, "CNIT");
        public final static Property Marque = new Property(2, String.class, "marque", false, "MARQUE");
        public final static Property Modele = new Property(3, String.class, "modele", false, "MODELE");
        public final static Property CoutParJour = new Property(4, float.class, "coutParJour", false, "COUT_PAR_JOUR");
        public final static Property Disponible = new Property(5, boolean.class, "disponible", false, "DISPONIBLE");
    }


    public VehiculeDao(DaoConfig config) {
        super(config);
    }
    
    public VehiculeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VEHICULE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CNIT\" TEXT NOT NULL ," + // 1: CNIT
                "\"MARQUE\" TEXT NOT NULL ," + // 2: marque
                "\"MODELE\" TEXT NOT NULL ," + // 3: modele
                "\"COUT_PAR_JOUR\" REAL NOT NULL ," + // 4: coutParJour
                "\"DISPONIBLE\" INTEGER NOT NULL );"); // 5: disponible
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VEHICULE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Vehicule entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCNIT());
        stmt.bindString(3, entity.getMarque());
        stmt.bindString(4, entity.getModele());
        stmt.bindDouble(5, entity.getCoutParJour());
        stmt.bindLong(6, entity.getDisponible() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Vehicule entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCNIT());
        stmt.bindString(3, entity.getMarque());
        stmt.bindString(4, entity.getModele());
        stmt.bindDouble(5, entity.getCoutParJour());
        stmt.bindLong(6, entity.getDisponible() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Vehicule readEntity(Cursor cursor, int offset) {
        Vehicule entity = new Vehicule( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // CNIT
            cursor.getString(offset + 2), // marque
            cursor.getString(offset + 3), // modele
            cursor.getFloat(offset + 4), // coutParJour
            cursor.getShort(offset + 5) != 0 // disponible
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Vehicule entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCNIT(cursor.getString(offset + 1));
        entity.setMarque(cursor.getString(offset + 2));
        entity.setModele(cursor.getString(offset + 3));
        entity.setCoutParJour(cursor.getFloat(offset + 4));
        entity.setDisponible(cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Vehicule entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Vehicule entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Vehicule entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

    public List<Vehicule> loadVehicules(VehiculeListeActivity.MODE_VEHICULE modeVehicule) {

        QueryBuilder queryBuilder = this.queryBuilder();

        switch (modeVehicule)
        {
            case LISTE_VEH_DISPONIBLES:
                queryBuilder.where(Properties.Disponible.eq(true));
                break;
            case LISTE_VEH_INDISPONIBLES:
                queryBuilder.where(Properties.Disponible.eq(false));
                break;
        }

        return queryBuilder.list();
    }
    
}
