package fr.eni.lokacar.dao;

import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;
import android.util.Log;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.QueryBuilder;

import fr.eni.lokacar.LocationListeActivity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCATION".
*/
public class LocationDao extends AbstractDao<Location, Long> {

    public static final String TABLENAME = "LOCATION";


    /**
     * Properties of entity Location.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ClientId = new Property(1, Long.class, "ClientId", false, "CLIENT_ID");
        public final static Property VehiculeId = new Property(2, Long.class, "VehiculeId", false, "VEHICULE_ID");
        public final static Property DateContrat = new Property(3, java.util.Date.class, "DateContrat", false, "DATE_CONTRAT");
        public final static Property DateDebut = new Property(4, java.util.Date.class, "DateDebut", false, "DATE_DEBUT");
        public final static Property DatePrevue = new Property(5, java.util.Date.class, "DatePrevue", false, "DATE_PREVUE");
        public final static Property DateRendu = new Property(6, java.util.Date.class, "DateRendu", false, "DATE_RENDU");
        public final static Property CommentaireAvant = new Property(7, String.class, "CommentaireAvant", false, "COMMENTAIRE_AVANT");
        public final static Property CommentaireApres = new Property(8, String.class, "CommentaireApres", false, "COMMENTAIRE_APRES");
        public final static Property PrixJour = new Property(9, float.class, "PrixJour", false, "PRIX_JOUR");
        public final static Property CoutSupplementaire = new Property(10, Float.class, "CoutSupplementaire", false, "COUT_SUPPLEMENTAIRE");
    }

    private DaoSession daoSession;


    public LocationDao(DaoConfig config) {
        super(config);
    }
    
    public LocationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CLIENT_ID\" INTEGER," + // 1: ClientId
                "\"VEHICULE_ID\" INTEGER," + // 2: VehiculeId
                "\"DATE_CONTRAT\" INTEGER NOT NULL ," + // 3: DateContrat
                "\"DATE_DEBUT\" INTEGER NOT NULL ," + // 4: DateDebut
                "\"DATE_PREVUE\" INTEGER NOT NULL ," + // 5: DatePrevue
                "\"DATE_RENDU\" INTEGER," + // 6: DateRendu
                "\"COMMENTAIRE_AVANT\" TEXT," + // 7: CommentaireAvant
                "\"COMMENTAIRE_APRES\" TEXT," + // 8: CommentaireApres
                "\"PRIX_JOUR\" REAL NOT NULL ," + // 9: PrixJour
                "\"COUT_SUPPLEMENTAIRE\" REAL);"); // 10: CoutSupplementaire
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Location entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long ClientId = entity.getClientId();
        if (ClientId != null) {
            stmt.bindLong(2, ClientId);
        }
 
        Long VehiculeId = entity.getVehiculeId();
        if (VehiculeId != null) {
            stmt.bindLong(3, VehiculeId);
        }
        stmt.bindLong(4, entity.getDateContrat().getTime());
        stmt.bindLong(5, entity.getDateDebut().getTime());
        stmt.bindLong(6, entity.getDatePrevue().getTime());
 
        java.util.Date DateRendu = entity.getDateRendu();
        if (DateRendu != null) {
            stmt.bindLong(7, DateRendu.getTime());
        }
 
        String CommentaireAvant = entity.getCommentaireAvant();
        if (CommentaireAvant != null) {
            stmt.bindString(8, CommentaireAvant);
        }
 
        String CommentaireApres = entity.getCommentaireApres();
        if (CommentaireApres != null) {
            stmt.bindString(9, CommentaireApres);
        }
        stmt.bindDouble(10, entity.getPrixJour());
 
        Float CoutSupplementaire = entity.getCoutSupplementaire();
        if (CoutSupplementaire != null) {
            stmt.bindDouble(11, CoutSupplementaire);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Location entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long ClientId = entity.getClientId();
        if (ClientId != null) {
            stmt.bindLong(2, ClientId);
        }
 
        Long VehiculeId = entity.getVehiculeId();
        if (VehiculeId != null) {
            stmt.bindLong(3, VehiculeId);
        }
        stmt.bindLong(4, entity.getDateContrat().getTime());
        stmt.bindLong(5, entity.getDateDebut().getTime());
        stmt.bindLong(6, entity.getDatePrevue().getTime());
 
        java.util.Date DateRendu = entity.getDateRendu();
        if (DateRendu != null) {
            stmt.bindLong(7, DateRendu.getTime());
        }
 
        String CommentaireAvant = entity.getCommentaireAvant();
        if (CommentaireAvant != null) {
            stmt.bindString(8, CommentaireAvant);
        }
 
        String CommentaireApres = entity.getCommentaireApres();
        if (CommentaireApres != null) {
            stmt.bindString(9, CommentaireApres);
        }
        stmt.bindDouble(10, entity.getPrixJour());
 
        Float CoutSupplementaire = entity.getCoutSupplementaire();
        if (CoutSupplementaire != null) {
            stmt.bindDouble(11, CoutSupplementaire);
        }
    }

    @Override
    protected final void attachEntity(Location entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Location readEntity(Cursor cursor, int offset) {
        Location entity = new Location( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // ClientId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // VehiculeId
            new java.util.Date(cursor.getLong(offset + 3)), // DateContrat
            new java.util.Date(cursor.getLong(offset + 4)), // DateDebut
            new java.util.Date(cursor.getLong(offset + 5)), // DatePrevue
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // DateRendu
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // CommentaireAvant
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // CommentaireApres
            cursor.getFloat(offset + 9), // PrixJour
            cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10) // CoutSupplementaire
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Location entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClientId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setVehiculeId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setDateContrat(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setDateDebut(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setDatePrevue(new java.util.Date(cursor.getLong(offset + 5)));
        entity.setDateRendu(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setCommentaireAvant(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCommentaireApres(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPrixJour(cursor.getFloat(offset + 9));
        entity.setCoutSupplementaire(cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Location entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Location entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Location entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getClientDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getVehiculeDao().getAllColumns());
            builder.append(" FROM LOCATION T");
            builder.append(" LEFT JOIN CLIENT T0 ON T.\"CLIENT_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN VEHICULE T1 ON T.\"VEHICULE_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Location loadCurrentDeep(Cursor cursor, boolean lock) {
        Location entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Client client = loadCurrentOther(daoSession.getClientDao(), cursor, offset);
        entity.setClient(client);
        offset += daoSession.getClientDao().getAllColumns().length;

        Vehicule vehicule = loadCurrentOther(daoSession.getVehiculeDao(), cursor, offset);
        entity.setVehicule(vehicule);

        return entity;    
    }

    public Location loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Location> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Location> list = new ArrayList<Location>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Location> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Location> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }

    public List<Location> loadLocations(LocationListeActivity.MODE_LOCATIONS modeLocations) {

        QueryBuilder queryBuilder = this.queryBuilder();

        switch (modeLocations)
        {
            case LISTE_LOC_EN_COURS:
                queryBuilder.where(Properties.DateRendu.isNull());
                break;
            case LISTE_LOC_PASSEES:
                queryBuilder.where(Properties.DateRendu.isNotNull());
                break;
            case LISTE_LOC_DEPASSEES:
                queryBuilder.where(Properties.DateRendu.gt(new Date()));
                break;
        }

        return queryBuilder.list();

    }

    public int getNbLocations(Client client, LocationListeActivity.MODE_LOCATIONS modeLocations) {
        int nb = -1;

        try {

            QueryBuilder queryBuilder = this.queryBuilder();
            queryBuilder.where(Properties.ClientId.eq(client.getId()));

            switch (modeLocations) {
                case LISTE_LOC_EN_COURS:
                    queryBuilder.where(Properties.DateRendu.isNull());
                    break;
                case LISTE_LOC_PASSEES:
                    queryBuilder.where(Properties.DateRendu.isNotNull());
                    break;
                default:
                    break;
            }

            nb = queryBuilder.list().size();
        } catch (Exception ex)
        {
            Log.e("lol", ex.getMessage());
            ex.printStackTrace();
        }

        return nb;
    }

    public float getChiffreAffaireTotal() {
        List<Location> locations = loadLocations(LocationListeActivity.MODE_LOCATIONS.LISTE_LOC_TOUS);
        float ca = 0;

        for(Location l : locations)
        {
            float prixJour = l.getPrixJour();
            float coutSup = l.getCoutSupplementaire();

            try {
                ca += prixJour + coutSup;
            } catch (Exception ex) {
                Log.e("lol", "Erreur sur le calcul de la location " + l.toString());
                Log.e("lol", "prixJour = " + String.valueOf(prixJour));
                Log.e("lol", "coutSup = " + String.valueOf(coutSup));
                Log.e("lol", ex.getMessage());
                ex.printStackTrace();
            }
        }

        return ca;
    }
 
}
